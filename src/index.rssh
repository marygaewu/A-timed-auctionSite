'reach 0.1'

const AuctionProps =Object({
  startingBid: UInt,
  timeout: UInt });

const BidderProps ={
  getBid: Fun([UInt], Maybe(UInt)) };

const OwnerInterface ={
  showOwner: Fun([UInt, Address], Null),
  getAuctionProps: Fun([], AuctionProps),
  ...BidderProps };

const CreatorInterface ={
  ...OwnerInterface,
  getId: Fun([], UInt )};

const emptyAuction ={ startingBid: 0, timeout: 0};

export const main =
  Reach.App(
      {},
      [Participant('creator', CreatorInterface),
      ParticipantClass('Owner', OwnerInterface)],
     
      (Creator, Owner) => {
        Creator.only(() => {
          const id = declassify(interact.getId()); });
        Creator.publish(id);

    var owner = Creator;
    invariant(balance() == 0);
    while (true ) {
      commit();
  //Owner publishes info about the auction
      Owner.only(() => {
        interact.showOwner(id, owner);
        const amOwner = this == owner
        const {startingBid, timeout} =
          amOwner ? declassify(interact.getAuctionProps()) : emptyAuction;   });

      Owner
        .publish(startingBid, timeout)
        .when(amOwner)
        .timeout(false);
      
      const [ timeRemaining, keepGoing] = makeDeadline(timeout);
      
      //bidders should bid until there is a best bid
      const [winner, isFirstBid, currentPrice] =
        parallelReduce([owner, true, startingBid ])
          .invariant(balance() == (isFirstBid ? 0 : currentPrice))
          .while(keepGoing())
          .case(Owner,
            (() => {
              const nbid =(this != owner && this !=winner)
                ? declassify(interact.getBid(currentPrice))
                : Maybe(UInt).None();
              return ({
                when: maybe(nbid, false, ((bid) => bid > currentPrice)),
                msg : fromSome(nbid, 0),
              });
            }),
            ((bid) => bid),
            ((bid) => {
              //Return funds to highest bidder
              transfer(isFirstBid ? 0: currentPrice).to(winner);
              return [this, false, bid];
            })
          )
           .timeRemaining(timeRemaining());
      transfer(isFirstBid ? 0: currentPrice).to(owner);
      owner = winner;
      continue;
      };
      commit();
      exit();
      });
